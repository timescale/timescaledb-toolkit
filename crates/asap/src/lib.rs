// based on https://github.com/stanford-futuredata/ASAP/blob/8b39db4bc92590cbe5b44ddace9b7bb1d677248b/ASAP-optimized.js
// orginal copyright notice as follows
//
// Free FFT and convolution (JavaScript)
//
// Copyright (c) 2014 Project Nayuki
// https://www.nayuki.io/page/free-small-fft-in-multiple-languages
//
// (MIT License)
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// - The above copyright notice and this permission notice shall be included in
//   all copies or substantial portions of the Software.
// - The Software is provided "as is", without warranty of any kind, express or
//   implied, including but not limited to the warranties of merchantability,
//   fitness for a particular purpose and noninfringement. In no event shall the
//   authors or copyright holders be liable for any claim, damages or other
//   liability, whether in an action of contract, tort or otherwise, arising from,
//   out of or in connection with the Software or the use or other dealings in the
//   Software.

mod fft;

// Smooth out the data to promote human readability, resolution is an upper bound on the number of points returned
pub fn asap_smooth(data: &[f64], resolution: u32) -> Vec<f64> {
    use std::borrow::Cow;

    let data = if data.len() > 2 * resolution as usize {
        let period = (data.len() as f64 / resolution as f64) as u32;
        Cow::Owned(sma(data, period, period))
    } else {
        Cow::Borrowed(data)
    };

    let mut acf = Acf::new(&data, (data.len() as f64 / 10.0).round() as u32);
    let peaks = acf.find_peaks();
    let mut metrics = Metrics::new(&data);
    let original_kurt = metrics.kurtosis();
    let mut min_obj = metrics.roughness();
    let mut window_size = 1_u32;
    let mut lb = 1;
    let mut largest_feasible = -1_i32;
    let mut tail = data.len() as u32 / 10;

    for i in (0..peaks.len()).rev() {
        let w = peaks[i];
        if w < lb || w == 1 {
            break;
        } else if (1.0 - acf.correlations[w as usize]).sqrt() * window_size as f64
            > (1.0 - acf.correlations[window_size as usize]).sqrt() * w as f64
        {
            continue;
        }
        let smoothed = sma(&data, w, 1);
        metrics = Metrics::new(&smoothed);
        if metrics.kurtosis() >= original_kurt {
            let roughness = metrics.roughness();
            if roughness < min_obj {
                min_obj = roughness;
                window_size = w;
            }
            let test_lb =
                w as f64 * (acf.max_acf - 1.0).sqrt() / (acf.correlations[w as usize] - 1.0);
            if test_lb > lb as f64 {
                lb = test_lb.round() as u32;
            }
            if largest_feasible < 0 {
                largest_feasible = i as i32;
            }
        }
    }

    if largest_feasible > 0 {
        if largest_feasible < (peaks.len() - 2) as i32 {
            tail = peaks[(largest_feasible + 1) as usize];
        }
        if peaks[largest_feasible as usize] + 1 > lb {
            lb = peaks[largest_feasible as usize] + 1;
        }
    }

    window_size = binary_search(lb, tail, &data, min_obj, original_kurt, window_size);
    sma(&data, window_size, 1)
}

fn binary_search(
    head: u32,
    tail: u32,
    data: &[f64],
    min_obj: f64,
    original_kurt: f64,
    window_size: u32,
) -> u32 {
    let mut head = head;
    let mut tail = tail;
    let mut min_obj = min_obj;
    let mut window_size = window_size;
    while head <= tail {
        let w = (head + tail + 1) / 2;
        let smoothed = sma(data, w, 1);
        let metrics = Metrics::new(&smoothed);
        if metrics.kurtosis() >= original_kurt {
            /* Search second half if feasible */
            let roughness = metrics.roughness();
            if roughness < min_obj {
                window_size = w;
                min_obj = roughness;
            }
            head = w + 1;
        } else {
            /* Search first half */
            tail = w - 1;
        }
    }
    window_size
}

fn sma(data: &[f64], range: u32, slide: u32) -> Vec<f64> {
    let mut window_start = 0;
    let mut sum = 0.0;
    let mut count = 0;
    let mut values = Vec::new();

    for (i, val) in data.iter().enumerate() {
        sum += val;
        count += 1;
        if i + 1 - window_start >= range as usize {
            values.push(sum / count as f64);
            let old_start = window_start;
            while window_start < data.len() && window_start - old_start < slide as usize {
                sum -= data[window_start];
                count -= 1;
                window_start += 1;
            }
        }
    }

    values
}

fn mean(values: &[f64]) -> f64 {
    values.iter().sum::<f64>() / values.len() as f64
}

fn std(values: &[f64]) -> f64 {
    let m = mean(values);

    let std: f64 = values.iter().map(|&x| (x - m).powi(2)).sum();
    (std / values.len() as f64).sqrt()
}

impl<'a> Acf<'a> {
    fn new(values: &'a [f64], max_lag: u32) -> Acf<'a> {
        let mut acf = Acf {
            mean: mean(values),
            values,
            correlations: Vec::with_capacity(max_lag as usize),
            max_acf: 0.0,
        };
        acf.calculate();
        acf
    }

    fn calculate(&mut self) {
        /* Padding to the closest power of 2 */
        let len = (2_u32).pow((self.values.len() as f64).log2() as u32 + 1);
        let mut fftreal = vec![0.0; len as usize];
        let mut fftimg = vec![0.0; len as usize];

        for (i, real) in fftreal.iter_mut().enumerate().take(self.values.len()) {
            *real = self.values[i] - self.mean;
        }

        /* F_R(f) = FFT(X) */
        fft::transform(&mut fftreal, &mut fftimg);

        /* S(f) = F_R(f)F_R*(f) */
        for i in 0..fftreal.len() {
            fftreal[i] = fftreal[i].powi(2) + fftimg[i].powi(2);
            fftimg[i] = 0.0;
        }

        /*  R(t) = IFFT(S(f)) */
        fft::inverse_transform(&mut fftreal, &mut fftimg);
        for i in 1..self.correlations.len() {
            self.correlations[i] = fftreal[i] / fftreal[0];
        }
    }

    fn find_peaks(&mut self) -> Vec<u32> {
        const CORR_THRESH: f64 = 0.2;

        let mut peak_indicies = Vec::new();

        if self.correlations.len() > 1 {
            let mut positive = self.correlations[1] > self.correlations[0];
            let mut max = 1;
            for i in 2..self.correlations.len() {
                if !positive && self.correlations[i] > self.correlations[i - 1] {
                    max = i;
                    positive = !positive;
                } else if positive && self.correlations[i] > self.correlations[max] {
                    max = i;
                } else if positive
                    && self.correlations[i] < self.correlations[i - 1]
                    && max > 1
                    && self.correlations[max] > CORR_THRESH
                {
                    peak_indicies.push(max as u32);
                    if self.correlations[max] > self.max_acf {
                        self.max_acf = self.correlations[max];
                    }
                    positive = !positive;
                }
            }
        }

        /* If there is no autocorrelation peak within the MAX_WINDOW boundary,
        # try windows from the largest to the smallest */

        if peak_indicies.len() <= 1 {
            for i in 2..self.correlations.len() {
                peak_indicies.push(i as u32);
            }
        }

        peak_indicies
    }
}

struct Metrics<'a> {
    len: u32,
    values: &'a [f64],
    m: f64,
}

impl<'a> Metrics<'a> {
    fn new(values: &[f64]) -> Metrics {
        Metrics {
            len: values.len() as u32,
            values,
            m: mean(values),
        }
    }

    fn kurtosis(&self) -> f64 {
        let mut u4 = 0.0;
        let mut variance = 0.0;

        for value in self.values {
            u4 += (value - self.m).powi(4);
            variance += (value - self.m).powi(2);
        }

        self.len as f64 * u4 / variance.powi(2)
    }

    fn roughness(&self) -> f64 {
        std(&self.diffs())
    }

    fn diffs(&self) -> Vec<f64> {
        let mut diff = vec![0.0; (self.len - 1) as usize];
        for i in 1..self.len as usize {
            diff[i - 1] = self.values[i] - self.values[i - 1];
        }
        diff
    }
}

struct Acf<'a> {
    mean: f64,
    values: &'a [f64],
    correlations: Vec<f64>,
    max_acf: f64,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn simple_sma_test() {
        let data = vec![0.0, 1.0, 2.0, 3.0, 4.0];

        let test = sma(&data, 3, 1);
        assert_eq!(test, vec![1.0, 2.0, 3.0]);
    }

    #[test]
    fn sma_slide_test() {
        let data = vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0];

        let test = sma(&data, 3, 2);
        assert_eq!(test, vec![1.0, 3.0, 5.0]);
    }

    #[test]
    fn sma_slide_unaliged_test() {
        let data = vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0];

        let test = sma(&data, 3, 2);
        assert_eq!(test, vec![1.0, 3.0, 5.0]);
    }

    #[test]
    fn sma_downsample_test() {
        let data = vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0];

        let test = sma(&data, 2, 2);
        assert_eq!(test, vec![0.5, 2.5, 4.5, 6.5]);
    }

    #[test]
    fn test_roughness_and_kurtosis() {
        let series_a = vec![-1.0, 1.0, -1.0, 1.0, -1.0, 1.0]; // bimodal
        let x = (3.0 - ((9.0 + 8.0 * 1.82) as f64).sqrt()) / 4.0; // ~ -0.45, calculated for specific mean and std
        let series_b = vec![-1.0, -0.8, x, -0.2, 0.5, 1.5 - x]; // uneven but monotonically increasing
        let x = ((1.0 / 2.0) as f64).sqrt();
        let series_c = vec![-2.0 * x, -1.0 * x, 0.0, x, 2.0 * x]; // linear

        assert_eq!(mean(&series_a), 0.0);
        assert_eq!(std(&series_a), 1.0);
        assert_eq!(mean(&series_b), 0.0);
        assert_eq!(std(&series_b), 1.0);
        assert!(mean(&series_c).abs() < 0.000000000001); // float precision breaks == 0 here
        assert_eq!(std(&series_c), 1.0);

        let test = Metrics::new(&series_a);
        assert_eq!(
            test.roughness(),
            ((3.0 * 1.6_f64.powi(2) + 2.0 * 2.4_f64.powi(2)) / 5.0).sqrt()
        );
        assert_eq!(test.kurtosis(), 1.0);
        let test = Metrics::new(&series_b);
        assert_eq!(test.roughness(), 0.4686099077599554); // manually verified
        assert!((test.kurtosis() - 2.7304).abs() < 0.000000000001); // = 2.7304
        let test = Metrics::new(&series_c);
        assert_eq!(test.roughness(), 0.0);
        assert!((test.kurtosis() - 1.7).abs() < 0.000000000001); // == 1.7
    }

    #[test]
    fn test_smoothing() {
        // Monthly English temperature data from 1723 through 1970 (~3k pts)
        let data = vec![
            1.1, 4.4, 7.5, 8.9, 11.7, 15.0, 15.3, 15.6, 13.3, 11.1, 7.5, 5.8, 5.6, 4.2, 4.7, 7.2,
            11.4, 15.3, 15.0, 16.2, 14.4, 8.6, 5.3, 3.3, 4.4, 3.3, 5.0, 8.1, 10.8, 12.2, 13.8,
            13.3, 12.8, 9.4, 6.9, 3.9, 1.1, 4.2, 4.2, 8.4, 13.4, 16.4, 16.0, 15.6, 14.7, 10.2, 6.1,
            1.8, 4.2, 5.0, 5.1, 9.2, 13.6, 14.9, 16.9, 16.9, 14.4, 10.8, 4.7, 3.6, 3.9, 2.4, 7.1,
            8.3, 12.5, 16.4, 16.9, 16.0, 12.8, 9.1, 7.2, 1.6, 1.2, 2.3, 2.8, 7.1, 10.3, 15.1, 16.8,
            15.7, 16.6, 10.1, 8.1, 5.0, 4.1, 4.7, 6.2, 8.7, 12.4, 14.0, 15.3, 16.3, 15.3, 10.9,
            9.2, 3.4, 1.9, 2.2, 6.0, 6.8, 12.1, 15.6, 16.3, 16.7, 15.3, 12.3, 7.8, 5.2, 2.4, 6.4,
            6.1, 8.9, 11.4, 14.6, 16.0, 16.6, 14.5, 10.9, 6.3, 2.2, 6.9, 6.0, 5.9, 10.0, 11.2,
            15.2, 18.3, 16.1, 12.8, 9.1, 6.5, 7.6, 4.3, 6.4, 8.1, 9.3, 11.1, 14.1, 16.2, 16.2,
            13.3, 8.4, 6.2, 4.0, 4.4, 4.0, 5.8, 8.9, 10.9, 13.3, 14.8, 16.2, 14.2, 10.3, 6.3, 5.4,
            6.4, 3.1, 6.9, 8.6, 10.6, 15.7, 16.4, 17.8, 14.4, 10.4, 6.9, 6.4, 6.2, 4.2, 6.1, 8.8,
            12.5, 15.9, 17.4, 13.8, 14.2, 8.9, 6.1, 4.9, 4.6, 4.6, 5.5, 9.9, 11.4, 14.2, 16.4,
            16.0, 12.5, 10.2, 6.3, 6.1, 4.0, 6.8, 5.8, 6.7, 11.6, 15.2, 16.0, 14.7, 13.1, 9.6, 3.7,
            3.2, 2.8, 1.6, 3.9, 6.4, 8.6, 12.8, 15.3, 14.7, 14.0, 5.3, 3.3, 2.2, 1.7, 4.4, 4.2,
            7.1, 9.3, 15.2, 15.6, 16.7, 14.7, 11.0, 7.8, 3.9, 1.9, 3.6, 4.1, 6.6, 10.6, 15.0, 15.8,
            15.8, 12.2, 9.2, 4.4, 1.1, 3.6, 5.4, 5.3, 5.4, 13.3, 15.6, 14.9, 16.9, 14.2, 8.9, 9.3,
            4.9, 1.4, 2.9, 4.8, 6.7, 10.8, 14.4, 16.4, 15.4, 12.8, 9.4, 6.9, 3.5, 3.8, 2.3, 4.4,
            7.5, 11.4, 12.2, 16.1, 15.0, 14.2, 10.3, 5.8, 2.7, 2.5, 1.4, 3.1, 6.9, 12.8, 14.3,
            15.8, 15.9, 14.2, 7.8, 3.3, 5.3, 3.3, 5.8, 2.5, 8.1, 12.2, 14.7, 16.9, 18.3, 14.4, 9.4,
            6.9, 5.3, 2.5, 1.8, 1.8, 6.3, 10.4, 14.8, 15.4, 15.8, 14.2, 9.2, 7.1, 6.0, 5.3, 3.6,
            5.3, 6.8, 12.3, 11.9, 17.2, 15.6, 13.8, 10.1, 6.7, 4.7, 4.0, 6.7, 8.2, 7.7, 10.7, 14.2,
            17.2, 15.0, 15.2, 9.2, 4.0, 4.2, 4.0, 1.5, 6.2, 7.1, 9.3, 14.9, 15.3, 14.6, 12.6, 8.3,
            4.3, 3.0, 3.2, 3.1, 5.6, 6.8, 10.3, 14.8, 15.6, 15.7, 13.9, 10.6, 6.5, 4.2, 2.2, 3.6,
            6.0, 7.5, 12.1, 14.6, 15.2, 15.7, 13.1, 10.0, 4.6, 4.4, 3.3, 2.8, 3.4, 6.7, 12.2, 13.6,
            14.7, 15.7, 13.9, 10.4, 5.7, 3.6, 2.2, 1.2, 3.9, 10.0, 9.4, 15.7, 15.0, 14.6, 13.5,
            8.4, 4.7, 3.9, 4.4, 4.6, 6.0, 6.7, 9.1, 13.8, 16.1, 14.7, 13.6, 9.4, 3.9, 2.9, 0.3,
            4.0, 4.9, 8.1, 10.7, 14.0, 18.4, 15.2, 13.3, 8.2, 7.1, 3.2, 2.6, 3.8, 5.2, 7.2, 13.8,
            14.6, 14.2, 16.4, 11.9, 8.1, 5.7, 3.9, 5.9, 5.8, 6.1, 8.6, 12.1, 15.0, 18.2, 16.3,
            13.5, 10.9, 5.1, 2.5, 1.9, 3.8, 6.6, 9.4, 11.7, 15.2, 16.9, 15.8, 15.7, 9.2, 5.7, 6.1,
            5.4, 5.8, 6.8, 9.4, 11.9, 14.3, 15.8, 16.4, 14.2, 9.4, 6.2, 4.4, 4.7, 4.0, 3.7, 10.0,
            12.9, 16.9, 17.8, 15.3, 13.6, 7.9, 4.6, 3.6, 0.8, 4.9, 5.4, 8.9, 10.2, 14.6, 15.3,
            15.3, 13.1, 8.3, 5.8, 6.2, 3.7, 3.8, 3.9, 7.2, 12.2, 13.9, 16.1, 15.2, 12.5, 8.9, 4.4,
            2.8, 4.8, 0.4, 5.0, 7.5, 11.4, 13.8, 15.7, 15.3, 13.3, 9.2, 3.9, 1.7, 0.7, 1.7, 4.2,
            8.1, 9.7, 13.7, 15.7, 16.6, 13.3, 9.3, 7.2, 3.3, 0.1, 5.4, 4.7, 7.3, 10.0, 12.8, 14.4,
            16.1, 14.1, 9.2, 6.9, 3.3, 0.8, 4.8, 4.7, 8.1, 12.2, 13.9, 15.6, 16.0, 11.7, 9.2, 5.6,
            4.6, 2.5, 2.7, 5.0, 7.8, 11.3, 13.1, 16.4, 15.0, 12.8, 8.2, 5.7, 4.8, 3.7, 4.6, 2.5,
            5.4, 10.0, 13.1, 15.3, 15.8, 13.9, 8.9, 5.3, 3.6, 1.0, 3.2, 3.1, 5.5, 12.2, 14.3, 15.7,
            14.3, 12.2, 9.2, 6.3, 5.6, 1.2, 1.9, 4.4, 6.4, 10.1, 16.1, 16.9, 16.1, 13.0, 11.7, 7.2,
            4.8, 4.0, 2.6, 6.5, 8.3, 10.3, 14.7, 15.9, 17.2, 12.4, 9.9, 5.3, 3.8, 0.6, 4.3, 6.4,
            8.6, 10.9, 14.7, 16.1, 16.1, 12.5, 10.3, 4.8, 3.5, 4.6, 6.1, 6.0, 9.8, 12.6, 16.6,
            16.7, 15.8, 14.3, 9.3, 4.8, 4.5, 1.6, 3.8, 6.4, 9.4, 10.8, 14.1, 16.3, 15.2, 12.9,
            10.2, 6.2, 4.4, 1.9, 2.3, 6.8, 7.2, 11.7, 13.6, 15.3, 15.9, 14.6, 10.2, 6.9, 2.6, 1.9,
            3.2, 4.6, 8.2, 10.6, 15.4, 17.3, 16.8, 12.2, 7.4, 6.7, 6.1, 2.9, 7.9, 7.9, 9.4, 11.9,
            14.4, 17.9, 17.6, 15.2, 10.9, 5.7, 3.1, 0.9, 2.1, 7.9, 6.3, 12.8, 14.2, 16.8, 17.6,
            15.6, 9.1, 4.4, 3.2, 2.1, 4.8, 6.6, 9.2, 12.1, 16.2, 17.4, 17.3, 14.2, 10.6, 6.5, 5.4,
            5.2, 1.9, 4.1, 5.2, 9.0, 14.9, 15.6, 14.2, 13.3, 7.6, 2.3, 2.8, 3.4, 3.3, 3.3, 10.1,
            10.4, 14.8, 18.8, 15.8, 12.8, 9.8, 6.2, 2.7, 0.6, 1.4, 2.7, 5.7, 13.5, 13.7, 15.2,
            14.0, 14.8, 7.8, 5.5, 0.3, 3.4, 0.4, 1.2, 8.4, 12.3, 16.1, 16.1, 13.9, 13.6, 8.7, 5.6,
            2.8, 2.7, 3.4, 2.1, 8.1, 11.2, 16.1, 15.0, 15.1, 11.7, 7.5, 3.3, 2.8, 3.6, 5.9, 6.8,
            7.4, 11.5, 13.9, 15.8, 15.6, 12.8, 9.8, 4.5, 3.8, 3.9, 3.8, 3.6, 9.4, 13.8, 15.4, 15.8,
            15.8, 13.4, 9.8, 6.1, 0.3, 1.5, 5.0, 2.1, 7.4, 12.5, 14.0, 15.4, 16.6, 13.1, 8.6, 4.6,
            6.1, 4.3, 6.6, 6.4, 6.1, 11.9, 14.6, 14.9, 15.6, 12.2, 10.3, 6.1, 4.3, 4.3, 4.7, 6.5,
            9.6, 10.6, 14.7, 15.3, 15.9, 13.8, 8.9, 5.9, 1.1, 2.3, 4.5, 5.9, 10.0, 10.2, 13.2,
            15.3, 16.9, 11.8, 8.8, 7.1, 4.3, 2.8, 4.6, 4.2, 6.2, 10.9, 13.5, 17.6, 15.0, 11.7,
            11.3, 6.0, 5.3, 1.8, 7.2, 7.0, 10.2, 11.3, 15.7, 18.1, 15.5, 12.5, 9.6, 6.1, 3.7, 3.1,
            0.8, 3.9, 7.7, 10.9, 13.2, 15.2, 16.6, 16.0, 11.7, 4.5, 6.6, 7.3, 4.7, 4.2, 10.2, 10.3,
            13.9, 14.7, 15.9, 14.6, 8.1, 4.6, 0.3, 3.5, 4.6, 4.3, 7.4, 11.3, 13.6, 17.3, 15.8,
            12.5, 8.2, 4.7, 4.8, 3.6, 4.0, 5.1, 10.4, 12.9, 16.9, 16.3, 16.4, 13.6, 9.9, 4.7, 1.5,
            1.7, 2.8, 3.4, 5.4, 9.6, 14.1, 15.2, 14.4, 12.9, 8.3, 5.6, 1.3, 2.8, 2.2, 4.0, 9.3,
            12.3, 13.9, 17.7, 16.8, 13.9, 9.2, 5.4, 3.3, 4.6, 4.8, 6.7, 8.3, 12.1, 14.8, 16.1,
            17.1, 14.2, 10.2, 4.8, 1.5, 1.6, 3.7, 5.6, 8.9, 10.6, 13.7, 13.5, 17.2, 13.8, 10.1,
            5.1, 3.6, 1.8, 3.4, 6.3, 9.1, 10.5, 13.7, 17.6, 16.1, 11.4, 9.3, 5.0, 4.4, 5.8, 2.9,
            4.7, 6.9, 13.3, 16.1, 15.9, 15.6, 14.2, 10.7, 6.6, 2.1, 2.1, 4.1, 6.2, 8.3, 10.2, 13.2,
            16.0, 16.4, 14.6, 8.2, 4.8, 3.6, 4.2, 4.3, 5.1, 6.8, 12.1, 14.9, 15.4, 16.2, 13.4,
            10.6, 7.8, 6.8, 2.8, 3.7, 2.9, 7.7, 11.8, 14.2, 17.1, 16.9, 10.5, 11.4, 2.9, 1.8, 2.6,
            2.8, 3.2, 5.8, 13.7, 14.8, 18.4, 16.7, 12.7, 7.2, 6.0, 2.2, 2.0, 5.7, 6.0, 5.2, 13.1,
            13.7, 15.1, 14.8, 12.7, 10.2, 4.6, 4.1, 2.2, 3.5, 4.9, 8.2, 9.2, 14.6, 15.2, 14.6,
            13.9, 9.8, 5.4, 3.6, 1.2, 4.6, 7.1, 8.9, 12.8, 14.1, 16.1, 14.4, 13.7, 12.3, 7.7, 3.1,
            2.6, 5.3, 3.5, 5.5, 10.9, 13.0, 14.2, 14.3, 13.2, 9.3, 4.9, 1.7, 1.9, 5.8, 6.8, 7.6,
            11.6, 13.6, 15.0, 14.5, 12.5, 8.1, 4.3, 2.8, 2.9, 1.4, 2.9, 9.6, 9.2, 12.2, 16.0, 14.7,
            12.8, 8.1, 4.7, 4.3, 0.3, 6.5, 7.3, 8.1, 12.6, 14.3, 14.9, 15.3, 13.4, 10.3, 3.4, 2.3,
            2.7, 2.1, 3.9, 6.6, 9.9, 12.8, 13.4, 13.9, 11.8, 10.3, 3.9, 3.1, 4.5, 6.4, 5.5, 7.6,
            8.7, 15.1, 14.1, 13.6, 13.2, 6.4, 9.1, 2.5, 4.4, 2.7, 4.5, 6.9, 11.3, 16.4, 18.2, 15.3,
            13.3, 12.0, 9.5, 3.6, 4.4, 4.3, 6.8, 8.6, 11.5, 13.4, 16.4, 17.4, 13.4, 9.1, 4.1, 1.4,
            0.3, 3.2, 4.7, 8.9, 11.4, 13.6, 15.7, 14.7, 12.3, 8.1, 5.6, 4.7, 3.6, 2.1, 5.7, 9.5,
            9.4, 12.3, 14.8, 16.4, 14.9, 10.4, 8.6, 6.4, 4.7, 6.3, 7.8, 8.3, 12.7, 17.1, 15.6,
            15.2, 12.4, 10.7, 8.2, 1.6, 0.1, 3.1, 5.0, 6.7, 12.2, 12.3, 14.1, 14.4, 12.5, 8.4, 7.1,
            4.8, 4.3, 4.7, 4.6, 7.4, 10.7, 13.4, 16.0, 15.1, 13.7, 9.5, 7.2, 5.1, 3.8, 3.9, 5.0,
            9.1, 11.6, 14.1, 17.2, 16.3, 15.1, 10.8, 5.2, 4.6, 0.4, 6.4, 6.3, 8.8, 11.2, 17.3,
            17.9, 17.6, 13.6, 11.1, 4.4, 5.8, 1.7, 0.7, 5.9, 8.9, 11.9, 14.2, 16.5, 14.8, 13.7,
            11.4, 6.9, 6.9, 5.1, 5.2, 6.6, 8.3, 12.4, 15.4, 16.0, 15.3, 14.3, 10.2, 7.4, 7.4, 0.3,
            4.3, 4.3, 6.7, 12.5, 14.9, 15.1, 14.3, 11.3, 8.3, 4.5, 1.4, 0.2, 2.2, 7.7, 8.9, 12.0,
            12.7, 16.2, 13.7, 11.9, 10.4, 6.9, 1.9, 1.6, 4.8, 7.2, 9.2, 11.5, 15.4, 16.7, 16.9,
            13.7, 12.7, 5.6, 5.8, 3.1, 3.4, 5.8, 8.6, 10.9, 15.2, 15.9, 15.4, 13.6, 10.7, 5.9, 5.1,
            1.2, 5.6, 3.9, 7.7, 15.1, 14.6, 15.8, 14.3, 12.1, 10.1, 6.6, 6.9, 7.1, 5.6, 7.1, 7.7,
            13.0, 15.4, 16.9, 16.2, 13.8, 10.6, 6.7, 5.6, 2.9, 5.7, 5.8, 8.6, 11.3, 15.0, 16.4,
            16.9, 13.4, 8.9, 6.6, 3.1, 3.7, 3.5, 5.8, 7.2, 11.1, 15.3, 15.4, 14.6, 11.7, 8.6, 5.3,
            4.1, 2.7, 4.7, 2.3, 4.7, 9.9, 15.5, 16.9, 15.7, 12.5, 10.5, 5.2, 5.3, 1.5, 0.4, 4.9,
            6.1, 10.5, 14.4, 15.6, 15.1, 12.7, 9.8, 4.6, 4.0, 2.8, 4.1, 4.2, 6.4, 10.2, 14.3, 14.9,
            14.6, 12.4, 9.3, 7.3, 3.7, 4.1, 3.6, 3.8, 9.7, 11.4, 14.1, 13.8, 15.9, 11.1, 7.5, 11.4,
            1.3, 1.1, 2.4, 7.5, 7.8, 12.7, 12.9, 13.8, 14.6, 13.4, 8.7, 5.2, 4.4, 0.6, 4.2, 6.4,
            7.8, 11.4, 15.6, 14.5, 17.1, 13.2, 7.2, 5.5, 7.2, 4.0, 1.9, 5.6, 8.5, 10.4, 12.8, 14.8,
            15.3, 14.4, 7.9, 5.7, 7.4, 3.8, 1.6, 4.7, 9.8, 10.8, 14.7, 15.4, 13.5, 13.3, 9.2, 5.9,
            0.4, 3.2, 0.9, 2.0, 8.6, 9.5, 14.9, 14.3, 13.5, 11.4, 9.5, 6.7, 4.6, 6.3, 6.4, 6.1,
            7.8, 12.3, 18.2, 16.5, 16.6, 14.7, 9.5, 6.9, 0.5, 2.2, 2.4, 5.6, 6.6, 12.3, 13.9, 17.5,
            15.2, 11.5, 10.7, 7.9, 4.8, 1.3, 6.1, 5.9, 8.2, 13.9, 14.5, 15.6, 13.6, 12.8, 9.7, 5.8,
            5.6, 3.9, 5.7, 6.1, 6.4, 12.1, 13.9, 15.4, 15.6, 13.3, 9.2, 6.6, 3.4, 0.7, 6.4, 4.7,
            9.0, 10.1, 15.4, 16.2, 14.5, 12.3, 7.9, 7.4, 4.6, 5.6, 4.7, 5.8, 7.4, 10.4, 14.3, 14.6,
            15.5, 12.7, 10.8, 3.1, 4.8, 4.9, 4.7, 5.2, 8.2, 10.6, 13.2, 18.7, 15.8, 12.9, 7.8, 7.9,
            7.7, 5.1, 0.6, 3.4, 7.6, 10.9, 14.3, 14.9, 14.7, 12.3, 10.1, 5.2, 1.3, 3.6, 4.3, 6.7,
            9.2, 10.3, 13.2, 15.4, 15.2, 14.4, 9.4, 4.9, 5.1, 2.4, 1.7, 3.3, 7.1, 8.8, 13.3, 16.8,
            15.7, 13.2, 9.7, 5.3, 2.4, 3.7, 5.3, 4.4, 8.1, 9.4, 13.5, 15.3, 16.9, 12.5, 10.7, 4.8,
            4.4, 2.6, 4.3, 5.3, 7.5, 11.3, 15.8, 16.4, 17.4, 14.5, 11.3, 7.2, 7.3, 3.4, 1.8, 4.9,
            7.7, 10.8, 16.8, 14.8, 15.8, 14.7, 9.6, 4.3, 4.8, 4.9, 5.7, 7.3, 7.5, 11.7, 14.8, 18.3,
            16.2, 12.9, 9.6, 4.8, 1.6, 3.5, 1.7, 4.7, 5.9, 11.5, 12.3, 14.5, 13.6, 11.2, 9.8, 4.5,
            1.5, 1.7, 4.9, 6.3, 7.5, 10.4, 14.8, 15.0, 15.9, 13.1, 11.8, 4.2, 3.9, 3.9, 5.1, 5.5,
            8.8, 12.3, 12.7, 14.2, 14.6, 13.0, 10.3, 3.2, 6.5, 4.9, 5.8, 6.5, 8.8, 10.6, 13.6,
            15.2, 15.5, 11.6, 9.9, 7.3, 6.3, 2.4, 2.3, 4.7, 8.8, 12.4, 13.6, 15.5, 14.2, 13.3, 9.8,
            5.5, 3.7, 2.1, 2.3, 2.9, 10.6, 12.6, 15.6, 16.6, 15.1, 16.3, 9.7, 6.7, 5.8, 5.8, 4.4,
            4.8, 8.6, 10.0, 15.5, 15.5, 14.7, 12.8, 10.7, 6.9, 6.1, 1.2, 6.9, 3.1, 9.3, 11.4, 14.1,
            14.9, 16.3, 13.6, 9.3, 4.8, 3.4, 3.9, 6.3, 6.8, 8.7, 13.5, 15.5, 18.3, 16.8, 14.3, 8.4,
            4.9, 7.2, 5.6, 7.5, 3.8, 10.1, 9.6, 13.2, 17.3, 15.5, 14.4, 9.7, 5.8, 2.9, 3.3, 2.8,
            4.7, 9.2, 11.7, 15.2, 17.5, 15.7, 12.9, 9.5, 4.7, 0.6, 0.5, 6.1, 7.3, 8.7, 11.3, 12.8,
            15.2, 17.2, 12.7, 9.8, 3.4, 3.6, 5.0, 6.9, 6.8, 8.2, 9.7, 14.1, 17.1, 15.3, 13.2, 8.4,
            7.0, 5.3, 5.2, 1.8, 5.4, 7.7, 9.9, 14.2, 16.2, 15.4, 11.8, 8.6, 6.3, 5.3, 5.5, 3.9,
            6.7, 9.8, 10.0, 13.9, 17.3, 15.1, 13.6, 10.4, 5.6, 0.2, 6.4, 2.3, 5.1, 8.6, 12.3, 14.2,
            14.8, 16.1, 14.9, 8.9, 5.4, 4.2, 3.2, 4.8, 4.5, 7.9, 9.6, 14.3, 17.2, 16.5, 12.7, 11.3,
            6.1, 6.0, 5.5, 6.2, 4.9, 7.0, 9.1, 15.2, 14.7, 15.2, 11.2, 9.3, 7.1, 4.7, 4.6, 5.6,
            5.4, 8.9, 11.8, 15.1, 16.6, 16.2, 13.3, 10.2, 3.5, 0.3, 0.7, 3.1, 4.7, 5.7, 8.9, 12.9,
            13.6, 14.5, 12.6, 8.9, 4.1, 0.7, 0.9, 5.8, 6.2, 7.9, 10.4, 13.8, 15.5, 16.4, 14.6, 7.1,
            5.4, 5.1, 1.5, 3.2, 5.3, 7.3, 11.8, 13.7, 16.2, 13.9, 12.7, 7.3, 8.9, 3.9, 5.2, 6.1,
            7.4, 8.4, 11.5, 13.1, 15.2, 14.9, 12.1, 9.9, 5.7, 3.9, 4.7, 5.9, 1.8, 8.1, 10.6, 13.9,
            14.5, 15.3, 13.3, 9.7, 5.8, 4.6, 6.5, 5.3, 6.5, 7.2, 11.3, 14.1, 16.3, 17.2, 14.5, 9.4,
            5.3, 4.4, 2.9, 5.8, 4.5, 7.7, 8.9, 13.9, 16.3, 13.6, 12.2, 7.5, 5.9, 3.7, 2.1, 1.5,
            4.2, 7.6, 10.3, 13.5, 15.9, 15.8, 13.6, 11.3, 6.6, 1.9, 2.4, 3.8, 3.3, 6.2, 9.4, 15.3,
            17.3, 15.7, 11.8, 7.1, 4.4, 2.6, 3.2, 1.8, 3.1, 6.2, 10.7, 13.2, 13.7, 14.1, 12.2, 7.9,
            7.7, 4.9, 3.4, 2.9, 4.7, 7.1, 12.9, 15.3, 15.3, 14.7, 12.8, 8.6, 6.9, 3.3, 5.7, 3.1,
            6.2, 7.1, 11.7, 13.5, 14.5, 14.1, 14.6, 9.4, 5.7, 0.8, 1.3, 3.9, 3.8, 6.2, 9.5, 14.7,
            15.1, 14.1, 14.2, 9.4, 5.6, 4.1, 2.3, 3.6, 2.7, 7.3, 11.6, 13.4, 14.3, 15.2, 12.4, 7.1,
            6.4, 1.8, 2.2, 4.7, 7.2, 10.3, 13.1, 15.6, 16.4, 17.4, 12.9, 9.9, 5.2, 4.8, 3.4, 5.1,
            6.7, 9.7, 9.2, 13.5, 15.9, 14.2, 11.6, 9.3, 7.9, 5.1, 0.2, 1.8, 5.1, 8.2, 12.4, 14.8,
            15.2, 15.8, 15.4, 7.1, 7.5, 3.9, 4.8, 4.6, 6.7, 9.1, 11.9, 16.2, 16.2, 14.3, 13.1, 6.9,
            4.3, 3.9, 1.6, 5.8, 6.5, 7.1, 10.0, 15.1, 16.5, 16.2, 12.1, 9.9, 7.6, 4.7, 6.6, 4.8,
            4.3, 8.5, 10.2, 13.6, 15.3, 16.5, 15.2, 11.3, 7.2, 7.3, 4.9, 5.1, 5.1, 7.8, 9.9, 15.7,
            17.3, 17.8, 13.2, 8.8, 8.5, 2.2, 4.4, 2.6, 3.7, 8.3, 10.3, 14.7, 17.7, 15.1, 13.6, 9.8,
            7.3, 7.2, 3.5, 2.3, 4.1, 8.6, 11.5, 13.9, 18.0, 15.6, 13.9, 9.7, 4.8, 3.4, 4.7, 1.5,
            6.7, 7.5, 8.9, 13.9, 14.7, 14.3, 12.8, 9.6, 6.8, 4.6, 4.2, 7.1, 7.1, 6.4, 11.1, 13.0,
            15.3, 14.3, 13.1, 10.5, 6.4, 3.3, 4.1, 3.4, 4.3, 8.7, 10.9, 13.3, 17.1, 15.1, 12.5,
            9.7, 5.2, 3.7, 3.6, 5.2, 6.8, 7.3, 10.8, 14.7, 17.2, 14.7, 12.4, 7.1, 4.9, 4.9, 5.3,
            3.1, 5.1, 7.3, 10.5, 14.3, 15.8, 16.7, 13.9, 10.9, 7.3, 3.0, 3.6, 2.8, 6.3, 7.6, 10.5,
            12.4, 14.1, 14.3, 13.6, 9.8, 6.5, 4.6, 2.5, 5.3, 4.3, 6.0, 12.4, 14.3, 15.8, 14.6,
            12.9, 12.9, 7.4, 3.9, 3.5, 2.9, 3.7, 8.7, 11.0, 11.8, 14.6, 15.4, 11.9, 10.4, 4.8, 3.9,
            3.5, 5.1, 5.6, 7.3, 11.2, 14.7, 14.2, 15.2, 12.5, 10.6, 3.2, 6.4, 3.8, 4.8, 5.2, 7.5,
            12.9, 14.5, 18.2, 18.2, 13.9, 9.3, 6.1, 6.2, 3.6, 5.4, 7.2, 8.8, 12.1, 13.9, 16.1,
            12.9, 11.1, 8.2, 6.3, 6.7, 4.5, 4.8, 6.2, 7.9, 11.4, 14.3, 14.6, 15.2, 14.1, 10.9, 8.4,
            5.1, 3.7, 6.8, 6.1, 9.8, 10.8, 14.5, 15.8, 16.1, 13.3, 10.3, 6.8, 4.6, 4.1, 4.3, 5.2,
            7.9, 10.8, 14.4, 14.6, 15.3, 13.4, 9.1, 2.8, 5.3, 7.5, 3.8, 3.3, 8.2, 11.6, 11.8, 15.3,
            16.4, 13.0, 10.6, 6.8, 1.9, 1.6, 0.9, 3.2, 5.4, 12.8, 15.2, 16.1, 15.3, 14.0, 7.5, 7.8,
            2.3, 3.8, 6.5, 5.7, 6.7, 13.0, 13.3, 15.4, 16.1, 11.9, 9.3, 5.5, 6.9, 2.9, 1.9, 3.6,
            7.1, 13.5, 14.3, 13.9, 15.7, 12.7, 7.4, 3.3, 5.5, 5.2, 6.0, 7.2, 8.2, 11.8, 14.4, 14.1,
            13.6, 13.0, 10.4, 6.8, 4.2, 7.3, 4.8, 7.4, 8.0, 11.5, 14.7, 18.5, 15.4, 14.1, 12.8,
            4.6, 6.5, 3.7, 4.4, 4.6, 5.5, 12.7, 13.8, 13.7, 13.6, 12.2, 8.2, 5.9, 5.8, 5.6, 5.6,
            6.5, 7.6, 9.2, 12.5, 17.5, 15.2, 12.5, 9.7, 3.3, 3.8, 4.7, 3.3, 4.1, 6.9, 11.6, 13.9,
            15.3, 14.1, 13.3, 10.1, 7.1, 6.8, 5.3, 5.2, 4.9, 7.5, 11.6, 15.0, 16.8, 15.4, 11.5,
            10.4, 3.6, 2.8, 4.6, 6.8, 6.3, 9.3, 10.2, 13.6, 17.1, 16.2, 14.4, 8.1, 5.9, 4.2, 4.6,
            3.9, 7.3, 7.9, 11.2, 12.6, 15.9, 15.7, 12.5, 10.5, 6.2, 2.1, 5.2, 5.8, 6.3, 8.5, 10.9,
            12.9, 16.1, 15.3, 12.8, 10.1, 7.6, 3.4, 1.3, 0.4, 6.2, 6.8, 11.3, 13.3, 16.0, 15.4,
            15.3, 9.6, 6.7, 5.8, 5.6, 2.5, 5.3, 8.3, 10.7, 15.3, 15.2, 15.7, 13.6, 10.5, 6.2, 4.3,
            3.2, 3.9, 4.2, 7.7, 11.4, 14.4, 15.3, 14.4, 11.5, 8.8, 7.8, 5.3, 6.3, 2.9, 4.7, 6.9,
            10.5, 14.1, 16.1, 17.1, 12.9, 8.8, 6.6, 5.7, 2.2, 4.3, 7.3, 8.8, 12.2, 15.6, 17.8,
            17.6, 14.9, 10.1, 5.6, 1.6, 4.1, 3.8, 4.8, 8.0, 11.3, 14.9, 18.2, 15.4, 14.6, 10.6,
            6.1, 8.1, 4.5, 5.8, 6.6, 8.2, 9.9, 15.1, 17.1, 16.6, 13.6, 9.5, 6.9, 2.8, 3.7, 2.6,
            7.1, 6.3, 11.5, 14.7, 15.3, 16.1, 14.4, 9.4, 5.5, 5.3, 5.2, 5.6, 3.6, 9.2, 12.2, 14.1,
            16.1, 16.9, 13.4, 10.4, 5.1, 3.0, 5.7, 5.1, 9.1, 7.6, 10.7, 14.4, 15.2, 16.3, 13.8,
            10.5, 9.4, 4.4, 4.2, 5.6, 5.8, 8.8, 11.4, 14.2, 15.5, 16.4, 14.2, 8.2, 8.7, 3.2, 1.4,
            2.6, 6.0, 8.7, 12.5, 16.4, 15.1, 15.6, 12.8, 9.6, 6.9, 3.8, 0.5, 3.5, 5.1, 6.4, 9.4,
            15.1, 17.3, 14.7, 14.5, 10.4, 6.6, 5.6, 0.9, 0.1, 5.2, 9.2, 11.1, 14.4, 15.5, 16.6,
            13.6, 10.4, 4.9, 6.7, 4.9, 6.1, 6.5, 10.5, 11.8, 14.4, 16.4, 16.1, 13.3, 10.6, 6.3,
            3.5, 5.8, 3.6, 5.2, 10.2, 11.4, 13.5, 16.5, 17.0, 12.5, 9.3, 6.2, 3.6, 0.4, 7.1, 7.9,
            10.1, 12.2, 14.6, 16.7, 15.9, 14.4, 11.9, 7.2, 4.9, 2.7, 5.9, 5.1, 9.9, 10.7, 13.1,
            16.3, 14.7, 14.0, 9.8, 8.1, 3.1, 2.2, 1.9, 3.6, 8.6, 13.5, 15.5, 17.0, 18.6, 14.9,
            10.6, 7.2, 5.1, 5.4, 4.7, 8.3, 9.0, 11.4, 13.5, 15.8, 15.1, 13.8, 10.1, 7.3, 5.7, 5.5,
            5.7, 5.1, 10.0, 11.2, 15.3, 17.4, 16.8, 16.3, 11.7, 6.6, 5.8, 4.2, 5.3, 7.4, 7.6, 11.3,
            16.2, 15.9, 15.6, 12.9, 9.6, 5.7, 1.2, 3.9, 3.7, 4.1, 6.8, 10.1, 14.0, 16.3, 14.8,
            14.1, 9.4, 8.5, 5.5, 2.7, 3.4, 6.6, 9.6, 13.4, 14.4, 16.8, 15.8, 10.7, 8.8, 4.1, 2.8,
            3.3, 4.3, 5.6, 7.3, 12.6, 14.4, 15.5, 16.2, 13.8, 9.7, 8.5, 6.9, 2.9, 2.6, 5.8, 7.6,
            11.2, 13.4, 14.2, 14.6, 12.7, 11.9, 6.9, 6.8, 2.6, 1.2, 3.2, 9.3, 9.7, 13.8, 17.7,
            18.1, 14.2, 9.2, 7.0, 5.4, 3.6, 0.2, 6.2, 6.9, 11.7, 13.1, 15.8, 13.5, 14.3, 9.4, 6.0,
            5.7, 5.5, 5.3, 9.2, 8.9, 10.3, 15.2, 16.3, 15.4, 12.5, 10.8, 6.4, 4.5, 3.4, 4.7, 3.7,
            7.4, 11.1, 14.1, 15.9, 15.8, 15.1, 10.8, 6.4, 4.7, 1.6, 4.4, 7.3, 9.4, 12.8, 15.2,
            17.3, 17.2, 14.9, 12.6, 7.1, 6.0, 3.8, 4.1, 6.4, 8.9, 12.8, 16.1, 15.1, 15.0, 13.1,
            10.3, 7.3, 3.9, 3.9, 6.9, 8.2, 10.0, 11.0, 14.4, 15.2, 15.4, 15.2, 10.9, 6.0, 2.2, 4.3,
            4.4, 2.8, 7.7, 10.3, 13.7, 15.1, 14.5, 12.6, 10.4, 5.5, 1.8, 2.1, 0.7, 6.0, 8.7, 10.6,
            14.9, 15.2, 14.3, 12.9, 11.1, 8.2, 2.6, 3.4, 4.5, 4.3, 8.7, 13.3, 13.8, 16.1, 15.5,
            14.1, 8.9, 7.4, 3.6, 3.3, 3.1, 5.2, 8.0, 11.7, 14.7, 14.0, 14.9, 12.3, 11.0, 4.5, 4.7,
            2.9, 5.7, 6.5, 7.2, 11.0, 15.4, 15.0, 14.7, 13.8, 10.1, 5.6, 5.5, 4.5, 5.4, 7.0, 7.7,
            10.4, 14.0, 16.7, 15.7, 13.5, 10.8, 5.4, 4.2, 4.4, 1.9, 6.3, 8.1, 9.8, 14.8, 15.0,
            15.4, 13.9, 12.5, 6.5, 3.0, 5.5, 1.0, 3.3, 7.4, 11.2, 13.9, 16.8, 16.4, 13.9, 13.0,
            5.4, 3.3, 3.7, 2.9, 3.7, 6.7, 13.0, 16.4, 15.2, 16.0, 14.4, 10.7, 7.8, 4.3,
        ];

        // spot test against values taken from the reference implementation
        let test = asap_smooth(&data, 100);
        assert_eq!(test.len(), 93);
        assert!((test[10] - 9.021034).abs() < 0.000001);
        assert!((test[20] - 9.19).abs() < 0.000001);
        assert!((test[30] - 9.068966).abs() < 0.000001);
        assert!((test[40] - 9.237586).abs() < 0.000001);
        assert!((test[50] - 9.145172).abs() < 0.000001);
        assert!((test[60] - 9.014483).abs() < 0.000001);
        assert!((test[70] - 9.293448).abs() < 0.000001);
        assert!((test[80] - 9.417931).abs() < 0.000001);
        assert!((test[90] - 9.602069).abs() < 0.000001);
    }
}
